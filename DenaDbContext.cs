// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable


using DenaAPI.Models;
using Microsoft.EntityFrameworkCore;



namespace DenaAPI
{
    public partial class DenaDbContext : DbContext
    {
        public DenaDbContext()
        {
        }

        public DenaDbContext(DbContextOptions<DenaDbContext> options)
            : base(options)
        {

        }

        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

        public virtual DbSet<User> Users { get; set; }
        public DbSet<Category> Categories { get; set; }
        public virtual DbSet<Sms> Sms { get; set; }
        public virtual DbSet<Intermediate> Intermediates { get; set; }
        public virtual DbSet<Models.Attribute> Attributes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Factor> Factors { get; set; }
        public virtual DbSet<PostDetail> PostDetails { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Factor>(entity =>
            {
                entity.HasOne(d => d.Post).WithMany(p => p.Factors)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Factor_PostDetail");

                entity.HasOne(d => d.Product).WithMany(p => p.Factors)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Factor_Product");

                entity.HasOne(d => d.User).WithMany(p => p.Factors)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Factor_User");
            });
            /*modelBuilder.Entity<PostDetail>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50);
            });*/
            modelBuilder.Entity<Sms>(entity =>
            {
                entity.Property(e => e.Phone).IsFixedLength();
                entity.HasOne(d => d.User)
                    .WithMany(p => p.Sms)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Sms_User");
                entity.ToTable("Sms");
            });
            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });
            modelBuilder.Entity<Models.Attribute>(entity =>
            {
                entity.ToTable("Attribute");

                entity.Property(e => e.Brand)
                    .IsRequired()
                    .HasMaxLength(50);
                entity.Property(e => e.Color)
                    .IsRequired()
                    .HasMaxLength(50);
                entity.Property(e => e.Size)
                    .IsRequired()
                    .HasMaxLength(50);
                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });
            modelBuilder.Entity<Intermediate>(entity =>
            {
                entity.ToTable("Intermediate");

                entity.HasOne(d => d.Attribute).WithMany(p => p.Intermediates)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Intermediate_Attribute");

                entity.HasOne(d => d.Product).WithMany(p => p.Intermediates)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Intermediate_Product");
            });
            modelBuilder.Entity<RefreshToken>(entity =>
            {

                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TokenHash)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TokenSalt)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TS)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TS");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RefreshTokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_RefreshToken_User");
                entity.ToTable("RefreshToken");
            });
            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.TS)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TS");

                entity.ToTable("User");

            });
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);


    }
}